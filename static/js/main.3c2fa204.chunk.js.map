{"version":3,"sources":["components/Counter.js","App.js","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","dispatch","changeStep","id","step","type","payload","increaseCount","decreaseCount","resetCount","deleteCounter","props","className","value","counter","onChange","e","target","Number","isInteger","onClick","count","state","counters","addCounter","map","index","key","Boolean","window","location","hostname","match","initCounters","uuidv4","action","updatedStepCounters","increaseCounters","decreaseCounters","resetCounters","newCounters","filter","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAuCeA,cAAQ,MAVI,SAACC,GACxB,MAAO,CACHC,WAAY,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAN,OAAgBH,EAAS,CAACI,KAAM,WAAYC,QAAS,CAACH,KAAIC,WACtEG,cAAe,SAACJ,GAAD,OAAQF,EAAS,CAACI,KAAM,iBAAkBC,QAASH,KAClEK,cAAe,SAACL,GAAD,OAAQF,EAAS,CAACI,KAAM,iBAAkBC,QAASH,KAClEM,WAAY,SAACN,GAAD,OAAQF,EAAS,CAACI,KAAM,cAAeC,QAASH,KAC5DO,cAAe,SAACP,GAAD,OAAQF,EAAS,CAACI,KAAM,iBAAkBC,QAASH,QAI3DH,EApCC,SAACW,GASb,OACI,yBAAKC,UAAU,qCACX,yBAAKA,UAAU,YACX,2BAAOP,KAAK,OAAOO,UAAU,eACtBC,MAAOF,EAAMG,QAAQV,KACrBW,SAZE,SAACC,GAClB,IAAMZ,GAAQY,EAAEC,OAAOJ,MACpBK,OAAOC,UAAUf,IAChBO,EAAMT,WAAW,CAACC,GAAIQ,EAAMG,QAAQX,GAAIC,KAAMA,QAY9C,4BAAQQ,UAAU,uBAAuBQ,QAAS,kBAAIT,EAAMH,cAAcG,EAAMG,QAAQX,MAAxF,KACA,0BAAMS,UAAU,OAAOD,EAAMG,QAAQO,OACrC,4BAAQT,UAAU,uBAAuBQ,QAAS,kBAAIT,EAAMJ,cAAcI,EAAMG,QAAQX,MAAxF,KACA,4BAAQS,UAAU,yBAAyBQ,QAAS,kBAAIT,EAAMF,WAAWE,EAAMG,QAAQX,MAAvF,SACA,4BAAQS,UAAU,yBAAyBQ,QAAS,kBAAIT,EAAMD,cAAcC,EAAMG,QAAQX,MAA1F,SCLZ,IAQeH,eARS,SAACsB,GAAD,MAAY,CAChCC,SAAUD,EAAMC,aAGO,SAACtB,GAAD,MAAe,CACtCuB,WAAa,SAACpB,GAAD,OAAUH,EAAS,CAACI,KAAM,cAAeC,QAASF,QAGpDJ,EAvBf,SAAaW,GACT,OACI,yBAAKC,UAAU,aAEPD,EAAMY,SAASE,KAAI,SAACX,EAASY,GAAV,OACf,kBAAC,EAAD,CAASC,IAAKD,EAAOZ,QAASA,OAGtC,yBAAKF,UAAU,qCACX,4BAAQA,UAAU,4BAA4BQ,QAAS,kBAAIT,EAAMa,eAAjE,YCDII,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yCChBAC,EAAe,CACnBV,SAAU,CACN,CAACpB,GAAI+B,eAAUb,MAAO,EAAGjB,KAAM,KAkDtBmB,EA9CE,WAAmC,IAAlCD,EAAiC,uDAAzBW,EAAcE,EAAW,uCAC/C,OAAQA,EAAO9B,MACX,IAAK,cACD,OAAO,2BAAIiB,GAAX,IACIC,SAAS,GAAD,mBAAMD,EAAMC,UAAZ,CAAsB,CAACpB,GAAI+B,eAAUb,MAAO,EAAGjB,KAAM,OAErE,IAAK,WACD,IAAMgC,EAAsBd,EAAMC,SAASE,KAAI,SAAAX,GAC3C,OAAGA,EAAQX,KAAOgC,EAAO7B,QAAQH,GACtB,2BAAIW,GAAX,IAAoBV,KAAM+B,EAAO7B,QAAQF,OAEtCU,KAEX,OAAO,2BAAIQ,GAAX,IAAkBC,SAAUa,IAChC,IAAK,iBACD,IAAMC,EAAmBf,EAAMC,SAASE,KAAI,SAAAX,GACxC,OAAGA,EAAQX,KAAOgC,EAAO7B,QACd,2BAAIQ,GAAX,IAAoBO,MAAQP,EAAQO,MAAQP,EAAQV,OAEjDU,KAEX,OAAO,2BAAIQ,GAAX,IAAkBC,SAAUc,IAChC,IAAK,iBACD,IAAMC,EAAmBhB,EAAMC,SAASE,KAAI,SAAAX,GACxC,OAAGA,EAAQX,KAAOgC,EAAO7B,QACd,2BAAIQ,GAAX,IAAoBO,MAAQP,EAAQO,MAAQP,EAAQV,OAEjDU,KAEX,OAAO,2BAAIQ,GAAX,IAAkBC,SAAUe,IAChC,IAAK,cACD,IAAMC,EAAgBjB,EAAMC,SAASE,KAAI,SAAAX,GACrC,OAAGA,EAAQX,KAAOgC,EAAO7B,QACd,2BAAIQ,GAAX,IAAoBO,MAAO,IAExBP,KAEX,OAAO,2BAAIQ,GAAX,IAAkBC,SAAUgB,IAChC,IAAK,iBACD,IAAMC,EAAclB,EAAMC,SAASkB,QAAO,SAAA3B,GAAO,OAAIA,EAAQX,KAAOgC,EAAO7B,WAC3E,OAAO,2BAAIgB,GAAX,IAAkBC,SAAUiB,IAChC,QACI,OAAOlB,ICvCJoB,EAPDC,sBACVpB,EACAqB,8BACIC,8BCERC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,QAGRO,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c2fa204.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from \"react-redux\";\r\n\r\nconst Counter = (props) => {\r\n\r\n    const onChangeStep = (e) => {\r\n        const step = +e.target.value\r\n        if(Number.isInteger(step)){\r\n            props.changeStep({id: props.counter.id, step: step})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row justify-content-md-center p-2\">\r\n            <div className=\"col-sm-1\">\r\n                <input type=\"text\" className=\"form-control\"\r\n                       value={props.counter.step}\r\n                       onChange={onChangeStep}\r\n                />\r\n            </div>\r\n            <button className=\"btn btn-outline-dark\" onClick={()=>props.decreaseCount(props.counter.id)}>-</button>\r\n            <span className=\"p-2\">{props.counter.count}</span>\r\n            <button className=\"btn btn-outline-dark\" onClick={()=>props.increaseCount(props.counter.id)}>+</button>\r\n            <button className=\"btn btn btn-light ml-1\" onClick={()=>props.resetCount(props.counter.id)}>Reset</button>\r\n            <button className=\"btn btn btn-light ml-1\" onClick={()=>props.deleteCounter(props.counter.id)}>X</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeStep: ({id, step}) => dispatch({type: \"SET_STEP\", payload: {id, step}}),\r\n        increaseCount: (id) => dispatch({type: \"INCREASE_COUNT\", payload: id}),\r\n        decreaseCount: (id) => dispatch({type: \"DECREASE_COUNT\", payload: id}),\r\n        resetCount: (id) => dispatch({type: \"RESET_COUNT\", payload: id}),\r\n        deleteCounter: (id) => dispatch({type: \"DELETE_COUNTER\", payload: id}),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Counter);","import React from 'react';\nimport {connect} from \"react-redux\";\nimport Counter from \"./components/Counter\";\n\nfunction App(props) {\n    return (\n        <div className=\"container\">\n            {\n                props.counters.map((counter, index) =>\n                    <Counter key={index} counter={counter}/>\n                )\n            }\n            <div className=\"row justify-content-md-center p-2\">\n                <button className=\"btn btn-outline-secondary\" onClick={()=>props.addCounter()}>Add</button>\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    counters: state.counters\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    addCounter:  (step) => dispatch({type: \"ADD_COUNTER\", payload: step})\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { v4 as uuidv4 } from 'uuid';\r\n\r\nconst initCounters = {\r\n  counters: [\r\n      {id: uuidv4(), count: 0, step: 1},\r\n  ]\r\n};\r\n\r\nconst counters = (state = initCounters, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_COUNTER':\r\n            return {...state,\r\n                counters: [...state.counters, {id: uuidv4(), count: 0, step: 1}]\r\n            };\r\n        case 'SET_STEP':\r\n            const updatedStepCounters = state.counters.map(counter => {\r\n                if(counter.id === action.payload.id){\r\n                    return {...counter, step: action.payload.step};\r\n                }\r\n                return counter;\r\n            });\r\n            return {...state, counters: updatedStepCounters};\r\n        case 'INCREASE_COUNT':\r\n            const increaseCounters = state.counters.map(counter => {\r\n                if(counter.id === action.payload){\r\n                    return {...counter, count: (counter.count + counter.step)};\r\n                }\r\n                return counter;\r\n            });\r\n            return {...state, counters: increaseCounters};\r\n        case 'DECREASE_COUNT':\r\n            const decreaseCounters = state.counters.map(counter => {\r\n                if(counter.id === action.payload){\r\n                    return {...counter, count: (counter.count - counter.step)};\r\n                }\r\n                return counter;\r\n            });\r\n            return {...state, counters: decreaseCounters};\r\n        case 'RESET_COUNT':\r\n            const resetCounters = state.counters.map(counter => {\r\n                if(counter.id === action.payload){\r\n                    return {...counter, count: 0};\r\n                }\r\n                return counter;\r\n            });\r\n            return {...state, counters: resetCounters};\r\n        case 'DELETE_COUNTER':\r\n            const newCounters = state.counters.filter(counter => counter.id !== action.payload);\r\n            return {...state, counters: newCounters};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default counters;","import {createStore, applyMiddleware} from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport counters from \"./reducer\";\r\n\r\nconst store = createStore(\r\n    counters,\r\n    composeWithDevTools(\r\n        applyMiddleware()\r\n    )\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}